generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id      String @id @default(cuid())
  clerkId String @unique

  fullName String @db.Text
  username String @unique
  avatar   String @db.Text
  bio      String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  videos    Video[]
  reactions VideoReaction[]
  comments  Comment[]

  following  Follow[] @relation(name: "Following")
  followedBy Follow[] @relation(name: "FollowedBy")
}

model Video {
  id          String @id @default(cuid())
  title       String @db.Text
  description String @db.Text
  thumbnail   String @db.Text
  videoUrl    String @db.Text
  category    String @default("General") @db.Text
  visibility  String @default("Private") @db.Text

  videoUrlKey  String @unique
  thumbnailKey String @default("") @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  views    Int @default(0)
  likes    Int @default(0)
  dislikes Int @default(0)

  reactions VideoReaction[]
  comments  Comment[]
}

model VideoReaction {
  id String @id @default(cuid())

  videoId String
  userId  String

  reaction String

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([videoId, userId])
}

model Comment {
  id      String @id @default(cuid())
  content String @db.Text

  videoId String
  userId  String

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([videoId, userId])
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower  User @relation(fields: [followerId], references: [id], onDelete: Cascade, name: "Following")
  following User @relation(fields: [followingId], references: [id], onDelete: Cascade, name: "FollowedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@unique([followingId])
  @@unique([followerId])
}